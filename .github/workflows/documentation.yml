# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Translate DOCUMENTATION

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:  # Allow manual triggering for testing

jobs:
  translate:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # Don't cancel other jobs if one fails
      matrix:
        language:
          - { code: zh-CN, name: Chinese Simplified }
          - { code: zh-TW, name: Chinese Traditional }
          - { code: hi, name: Hindi }
          - { code: ar, name: Arabic }
          - { code: fr, name: French }
          - { code: de, name: German }
          - { code: nl, name: Dutch }
          - { code: es, name: Spanish }
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
      
      # Backup original README.md and prepare DOCUMENTATION.md for translation
      - name: Prepare documentation for translation
        run: |
          # Backup original README.md if it exists
          if [ -f "README.md" ]; then
            cp README.md README.md.original
            echo "✅ Backed up original README.md"
          fi
          
          # Copy DOCUMENTATION.md to README.md for translation
          if [ -f "DOCUMENTATION.md" ]; then
            cp DOCUMENTATION.md README.md
            echo "✅ Copied DOCUMENTATION.md to README.md for translation"
          else
            echo "❌ DOCUMENTATION.md not found"
            exit 1
          fi
      
      - name: Translate DOCUMENTATION to ${{ matrix.language.name }}
        uses: dephraiim/translate-readme@main
        with:
          LANG: ${{ matrix.language.code }}
      
      # Rename the translated README back to DOCUMENTATION format
      - name: Rename translated file
        run: |
          if [ -f "README.${{ matrix.language.code }}.md" ]; then
            mv "README.${{ matrix.language.code }}.md" "DOCUMENTATION.${{ matrix.language.code }}.md"
            echo "✅ Renamed README.${{ matrix.language.code }}.md to DOCUMENTATION.${{ matrix.language.code }}.md"
          else
            echo "❌ Translation failed - README.${{ matrix.language.code }}.md not found"
            exit 1
          fi
      
      # Restore original README.md and clean up temporary files
      - name: Clean up temporary files and restore README.md
        run: |
          # Restore original README.md if backup exists
          if [ -f "README.md.original" ]; then
            mv README.md.original README.md
            echo "✅ Restored original README.md from backup"
          else
            # If no backup exists, restore from git or remove temporary file
            if git show HEAD:README.md > /dev/null 2>&1; then
              git checkout HEAD -- README.md
              echo "✅ Restored README.md from git"
            else
              rm -f README.md
              echo "✅ Removed temporary README.md (no original found)"
            fi
          fi
      
      - name: Commit translated documentation
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Ensure README.md is not modified (restore if needed)
          if ! git diff --quiet HEAD -- README.md 2>/dev/null; then
            git checkout HEAD -- README.md
            echo "⚠️ Restored README.md to prevent accidental changes"
          fi
          
          # Add only the translated DOCUMENTATION file
          git add "DOCUMENTATION.${{ matrix.language.code }}.md"
          
          if git diff --staged --quiet; then
            echo "No changes to commit for ${{ matrix.language.name }}"
          else
            git commit -m "docs: Added DOCUMENTATION.${{ matrix.language.code }}.md translation [skip spacelift]"
            
            # Retry push with pull/rebase in case of conflicts (race conditions)
            for i in {1..3}; do
              if git push; then
                echo "✅ Successfully pushed DOCUMENTATION.${{ matrix.language.code }}.md (attempt $i)"
                break
              else
                echo "⚠️ Push failed (attempt $i), pulling and retrying..."
                git pull --rebase
                if [ $i -eq 3 ]; then
                  echo "❌ Failed to push after 3 attempts"
                  exit 1
                fi
              fi
            done
          fi
