# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Translate README

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'README.md'  # Only trigger on README.md changes
    paths-ignore:
      - 'docs/**'    # Ignore changes in docs directory
  workflow_dispatch:  # Allow manual triggering
              
permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Fetch full history for proper git operations
          
      - name: Validate README.md content
        run: |
          # Check if README.md contains actual project content, not documentation content
          if grep -q "Read the Docs:" README.md && grep -q "Install ReadTheDocs" README.md; then
            echo "‚ùå README.md appears to contain documentation content instead of project README"
            echo "This suggests the documentation workflow may have overwritten README.md"
            echo "Skipping translation to prevent translating wrong content"
            exit 1
          fi
          
          # Check if README.md contains expected project content
          if ! grep -q "Open Hands" README.md; then
            echo "‚ö†Ô∏è README.md doesn't appear to contain expected project content"
            echo "Current README.md content (first 10 lines):"
            head -10 README.md
            echo "Proceeding with caution..."
          else
            echo "‚úÖ README.md appears to contain valid project content"
          fi

      - name: Sync with remote repository
        run: |
          # Configure git for the action
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Fetch latest changes and rebase if needed
          echo "üîÑ Fetching latest changes from remote..."
          git fetch origin
          
          # Check if we're behind the remote
          LOCAL=$(git rev-parse HEAD)
          REMOTE=$(git rev-parse origin/main)
          
          if [ "$LOCAL" != "$REMOTE" ]; then
            echo "‚ö†Ô∏è Local branch is behind remote. Attempting to sync..."
            git pull --rebase origin main || {
              echo "‚ùå Failed to rebase. This might be due to conflicts."
              echo "Current status:"
              git status
              exit 1
            }
            echo "‚úÖ Successfully synced with remote"
          else
            echo "‚úÖ Local branch is up to date with remote"
          fi
          
      - name: Setup Python for translation
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install translation dependencies
        run: |
          pip install googletrans==4.0.0rc1 requests

      - name: Generate all README translations
        run: |
          cat > translate_readme.py << 'EOF'
          import os
          import re
          from googletrans import Translator
          import time
          import sys

          def translate_readme(target_lang, lang_code):
              """Translate README.md to target language"""
              print(f"üåç Translating README to {target_lang} ({lang_code})...")
              
              try:
                  # Read the original README
                  with open('README.md', 'r', encoding='utf-8') as f:
                      content = f.read()
                  
                  # Initialize translator
                  translator = Translator()
                  
                  # Split content into chunks (Google Translate has limits)
                  chunks = []
                  current_chunk = ""
                  lines = content.split('\n')
                  
                  for line in lines:
                      if len(current_chunk + line + '\n') > 4000:  # Stay under 5000 char limit
                          if current_chunk.strip():
                              chunks.append(current_chunk.strip())
                          current_chunk = line + '\n'
                      else:
                          current_chunk += line + '\n'
                  
                  if current_chunk.strip():
                      chunks.append(current_chunk.strip())
                  
                  # Translate each chunk
                  translated_chunks = []
                  for i, chunk in enumerate(chunks):
                      print(f"  üìù Translating chunk {i+1}/{len(chunks)}...")
                      try:
                          # Skip code blocks and URLs
                          if chunk.startswith('```') or 'http' in chunk.lower():
                              translated_chunks.append(chunk)
                          else:
                              result = translator.translate(chunk, dest=lang_code)
                              translated_chunks.append(result.text)
                          time.sleep(1)  # Rate limiting
                      except Exception as e:
                          print(f"  ‚ö†Ô∏è Error translating chunk {i+1}: {e}")
                          translated_chunks.append(chunk)  # Use original if translation fails
                  
                  # Combine translated chunks
                  translated_content = '\n'.join(translated_chunks)
                  
                  # Write translated README
                  output_file = f'README.{lang_code}.md'
                  with open(output_file, 'w', encoding='utf-8') as f:
                      f.write(translated_content)
                  
                  print(f"  ‚úÖ {output_file} created successfully")
                  return True
                  
              except Exception as e:
                  print(f"  ‚ùå Error translating to {target_lang}: {e}")
                  return False

          # Language mappings
          languages = [
              ('Chinese Simplified', 'zh-CN'),
              ('Chinese Traditional', 'zh-TW'),
              ('Hindi', 'hi'),
              ('Arabic', 'ar'),
              ('French', 'fr'),
              ('German', 'de'),
              ('Dutch', 'nl'),
              ('Spanish', 'es')
          ]

          print("üöÄ Starting README translation process...")
          success_count = 0
          
          for lang_name, lang_code in languages:
              if translate_readme(lang_name, lang_code):
                  success_count += 1
              time.sleep(2)  # Rate limiting between languages
          
          print(f"\nüìä Translation Summary:")
          print(f"  ‚úÖ Successful: {success_count}/{len(languages)}")
          print(f"  üìÅ Generated files:")
          
          for lang_name, lang_code in languages:
              filename = f'README.{lang_code}.md'
              if os.path.exists(filename):
                  size = os.path.getsize(filename)
                  print(f"    - {filename} ({size} bytes)")
          
          EOF
          
          python translate_readme.py

      - name: Commit and push translations with conflict resolution
        run: |
          # Configure git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if there are any translation files to commit
          if ls README.*.md 1> /dev/null 2>&1; then
            echo "üìÅ Found translation files to commit"
            
            # Add all translation files
            git add README.*.md
            
            # Check if there are changes to commit
            if git diff --staged --quiet; then
              echo "‚ÑπÔ∏è No changes to commit"
              exit 0
            fi
            
            # Attempt to commit and push with retry logic
            for attempt in 1 2 3; do
              echo "üîÑ Attempt $attempt to commit and push..."
              
              # Fetch latest changes
              git fetch origin main
              
              # Check if we need to rebase
              if ! git diff --quiet HEAD origin/main; then
                echo "‚ö†Ô∏è Remote has new changes, rebasing..."
                git rebase origin/main || {
                  echo "‚ùå Rebase failed, aborting and retrying..."
                  git rebase --abort
                  continue
                }
              fi
              
              # Try to commit
              git commit -m "docs: Add README translations [skip spacelift]

              Generated translations for:
              - Chinese Simplified (zh-CN)
              - Chinese Traditional (zh-TW)  
              - Hindi (hi)
              - Arabic (ar)
              - French (fr)
              - German (de)
              - Dutch (nl)
              - Spanish (es)
              
              Auto-generated by GitHub Actions" || {
                echo "‚ùå Commit failed, retrying..."
                continue
              }
              
              # Try to push
              if git push origin main; then
                echo "‚úÖ Successfully pushed translations"
                break
              else
                echo "‚ùå Push failed, will retry..."
                git reset --soft HEAD~1  # Undo the commit to retry
                sleep 5
              fi
              
              if [ $attempt -eq 3 ]; then
                echo "‚ùå Failed to push after 3 attempts"
                exit 1
              fi
            done
          else
            echo "‚ö†Ô∏è No translation files found"
          fi
          
      - name: Verify README.md integrity
        run: |
          # Ensure the original README.md wasn't modified during translation
          if ! git diff --quiet HEAD -- README.md 2>/dev/null; then
            echo "‚ö†Ô∏è README.md was unexpectedly modified during translation"
            echo "Restoring original README.md content"
            git checkout HEAD -- README.md
          else
            echo "‚úÖ README.md integrity maintained"
          fi
          
          # Verify we have the expected translated files
          echo "üìã Generated translation files:"
          ls -la README.*.md 2>/dev/null || echo "No translation files found"
